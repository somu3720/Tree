/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        int level_sum = 0;
        
        while(!q.isEmpty())
        {
            level_sum = 0;
            int size = q.size();
            
            for(int i = 0; i < size; i++)
            {
                TreeNode curr_node = q.remove();
                
                level_sum += curr_node.val;
                
                if(curr_node.left != null)
                    q.add(curr_node.left);
                
                if(curr_node.right != null)
                    q.add(curr_node.right);

            }
        }
        
        return level_sum;
        
    }
}

//https://www.youtube.com/watch?v=hM9tzzlRcnM&t=12s
