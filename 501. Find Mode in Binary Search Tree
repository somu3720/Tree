
class Solution {
    Integer prev = null;
    int max = 0;
    int count = 1;
    public int[] findMode(TreeNode root) {
        
        List<Integer> modes = new ArrayList<>();
        
        helper(root, modes);
        
        
        int res[] =  new int[modes.size()];
        
        for(int i = 0; i < modes.size(); i++)
        {
            res[i] = modes.get(i);
        }
        
        return res;
    }
    
    public void helper(TreeNode node, List<Integer> modes)
    {
        if(node == null)
            return;
        
        helper(node.left, modes);
        
        if(prev != null)
        {
            if(prev == node.val)
            {
                count++;
            }
            else
            {
                count = 1;
            }
        }
        
        if(count > max)
        {
            max = count;
            modes.clear();
            modes.add(node.val);
        }
        
        else if(count == max)
        {
            modes.add(node.val);
        }
        
        prev = node.val;
        
        helper(node.right, modes);
        
    }
}

//https://www.youtube.com/watch?v=1FJDyBSfEbo
