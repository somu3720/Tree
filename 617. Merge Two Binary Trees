
 
 recursive DFS
 ....................................
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        
        //if t1 == null -> t2
        //if t2 == null -> t1
        // sum  (t1, t2)
        
        //preorder (N, L, R)
        
        if(root1 == null)
            return root2;
        
        if(root2 == null)
            return root1;
        
        root1.val += root2.val;
        
        root1.left = mergeTrees(root1.left, root2.left);
        root1.right = mergeTrees(root1.right, root2.right);
        
        return root1;
    }
}

iterative DFS
.........................................................
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        
        //if t1 == null -> t2
        //if t2 == null -> t1
        // sum  (t1, t2)
        
        //preorder (N, L, R)
        
   
        
         if(root1 == null)
            return root2;
        
        if(root2 == null)
            return root1;
        
        Stack<TreeNode[]> st = new Stack<>();
        st.push(new TreeNode[]{root1, root2});
        
        // while is not empty process the nodes
        while(!st.isEmpty())
        {
            TreeNode curr[] = st.pop();
            curr[0].val += curr[1].val;
            
            //1. curr[0] null, curr[1] != null -> curr[1]
            //2. curr[1] null, curr[0] != null -> curr[0]
            //3. both not null, add it stack
            
            //left tree
            if(curr[0].left == null)
                curr[0].left = curr[1].left;
            else if(curr[1].left != null)
                st.push(new TreeNode[]{curr[0].left, curr[1].left});
            
            //right tree
            if(curr[0].right == null)
                curr[0].right = curr[1].right;
            else if(curr[1].right != null)
                st.push(new TreeNode[]{curr[0].right, curr[1].right});
        }
        
        return root1;
    }
}
 
 iterative bfs
.......................................................
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        
        if(root1 == null)
            return root2;
        
        if(root2 == null)
            return root1;
      
         Queue<TreeNode[]> q = new LinkedList<>();
        q.add(new TreeNode[]{root1,root2});
        
        //While is not empty process the nodes
        while(!q.isEmpty()) 
        {
            TreeNode[] curr = q.remove();
            if(curr[1] != null) 
            {
                curr[0].val+=curr[1].val;
                
                //1. curr[0] = null -> curr[1]
                //2. curr[0] = null ->, add it queue 

                //Left Tree
                if(curr[0].left == null) {
                    curr[0].left = curr[1].left;
                }
                else {
                    q.add(new TreeNode[]{curr[0].left, curr[1].left});
                }

                //Right Tree
                if(curr[0].right == null) {
                    curr[0].right = curr[1].right;
                }
                else {
                    q.add(new TreeNode[]{curr[0].right, curr[1].right});
                }
            }
        }
        
        return root1;
    
    }
}



//https://www.youtube.com/watch?v=lw5swOzpFtE&t=14s
