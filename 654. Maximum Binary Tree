/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        
        TreeNode root = construct(nums, 0, nums.length -1);
        
        return root;
    }
    
    public TreeNode construct(int nums[], int start, int end)
    {
        if(start > end)
            return null;
        
        if(start == end)
            return new TreeNode(nums[start]);
        
        int index = findmax(nums, start, end);
        
        TreeNode root = new TreeNode(nums[index]);
        root.left = construct(nums, start, index - 1);
        root.right = construct(nums, index + 1, end);
        
        return root;
    }
    
    public int findmax(int nums[], int start, int end)
    {
        int max = Integer.MIN_VALUE;
        
        int index = -1;
        
        for(int i = start; i <= end; i++)
        {
            if(nums[i] > max)
            {
                max = nums[i];
                index = i;
            } 
        }
        
        return index;
    }
    
}

//https://www.youtube.com/watch?v=Kwg58ahdi_0&t=99s
