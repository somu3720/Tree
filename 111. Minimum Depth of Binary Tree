#DFS

public int minDepth(TreeNode root) {
    if (root == null) return 0;
    int L = minDepth(root.left), R = minDepth(root.right);
    return 1 + (Math.min(L, R) > 0 ? Math.min(L, R) : Math.max(L, R));
}

#BFS
.......................................
class Solution {
    public int minDepth(TreeNode root) {
        
        if(root == null)
            return 0;
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        int depth = 1;
        
        while(!q.isEmpty())
        {      int size = q.size();
            while(size-- > 0)
            {
                root = q.poll();
                
                
                if(root.left == null && root.right == null)  // check leaf node and return its depth level
                    return depth;
                
                if(root.left!= null)
                    q.add(root.left);
                
                if(root.right != null)
                    q.add(root.right);
                
                
                
            }
            
            depth++;
        }
        
        return 0;
        

    }
}

//https://leetcode.com/problems/minimum-depth-of-binary-tree/discuss/36060/3-lines-in-Every-Language
//https://www.youtube.com/watch?v=6aChG_3jMAQ
